// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

/**
 * Service represents the notifications service
 * @module
 */

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Call as $Call, Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as $models from "./models.js";

/**
 * CheckNotificationAuthorization is a Windows stub that always returns true.
 * (user authorization is macOS-specific)
 * @returns {Promise<boolean> & { cancel(): void }}
 */
export function CheckNotificationAuthorization() {
    let $resultPromise = /** @type {any} */($Call.ByID(2789931702));
    return $resultPromise;
}

/**
 * OnNotificationResponse registers a callback function that will be called when
 * a notification response is received from the user
 * @param {any} callback
 * @returns {Promise<void> & { cancel(): void }}
 */
export function OnNotificationResponse(callback) {
    let $resultPromise = /** @type {any} */($Call.ByID(2829398511, callback));
    return $resultPromise;
}

/**
 * RegisterNotificationCategory registers a new NotificationCategory to be used with SendNotificationWithActions.
 * Registering a category with the same name as a previously registered NotificationCategory will override it.
 * @param {$models.NotificationCategory} category
 * @returns {Promise<void> & { cancel(): void }}
 */
export function RegisterNotificationCategory(category) {
    let $resultPromise = /** @type {any} */($Call.ByID(2679064664, category));
    return $resultPromise;
}

/**
 * RemoveAllDeliveredNotifications is a Windows stub that always returns nil.
 * (macOS-specific)
 * @returns {Promise<void> & { cancel(): void }}
 */
export function RemoveAllDeliveredNotifications() {
    let $resultPromise = /** @type {any} */($Call.ByID(384520397));
    return $resultPromise;
}

/**
 * RemoveAllPendingNotifications is a Windows stub that always returns nil.
 * (macOS-specific)
 * @returns {Promise<void> & { cancel(): void }}
 */
export function RemoveAllPendingNotifications() {
    let $resultPromise = /** @type {any} */($Call.ByID(1423986276));
    return $resultPromise;
}

/**
 * RemoveDeliveredNotification is a Windows stub that always returns nil.
 * (macOS-specific)
 * @param {string} $0
 * @returns {Promise<void> & { cancel(): void }}
 */
export function RemoveDeliveredNotification($0) {
    let $resultPromise = /** @type {any} */($Call.ByID(149440045, $0));
    return $resultPromise;
}

/**
 * RemoveNotification is a Windows stub that always returns nil.
 * (Linux-specific)
 * @param {string} identifier
 * @returns {Promise<void> & { cancel(): void }}
 */
export function RemoveNotification(identifier) {
    let $resultPromise = /** @type {any} */($Call.ByID(3702062929, identifier));
    return $resultPromise;
}

/**
 * RemoveNotificationCategory removes a previously registered NotificationCategory.
 * @param {string} categoryId
 * @returns {Promise<void> & { cancel(): void }}
 */
export function RemoveNotificationCategory(categoryId) {
    let $resultPromise = /** @type {any} */($Call.ByID(229511469, categoryId));
    return $resultPromise;
}

/**
 * RemovePendingNotification is a Windows stub that always returns nil.
 * (macOS-specific)
 * @param {string} $0
 * @returns {Promise<void> & { cancel(): void }}
 */
export function RemovePendingNotification($0) {
    let $resultPromise = /** @type {any} */($Call.ByID(3872412470, $0));
    return $resultPromise;
}

/**
 * RequestUserNotificationAuthorization is a Windows stub that always returns true, nil.
 * (user authorization is macOS-specific)
 * @returns {Promise<boolean> & { cancel(): void }}
 */
export function RequestUserNotificationAuthorization() {
    let $resultPromise = /** @type {any} */($Call.ByID(3412125712));
    return $resultPromise;
}

/**
 * SendNotification sends a basic notification with a name, title, and body. All other options are ignored on Windows.
 * (subtitle and category id are only available on macOS)
 * @param {$models.NotificationOptions} options
 * @returns {Promise<void> & { cancel(): void }}
 */
export function SendNotification(options) {
    let $resultPromise = /** @type {any} */($Call.ByID(2246903123, options));
    return $resultPromise;
}

/**
 * SendNotificationWithActions sends a notification with additional actions and inputs.
 * A NotificationCategory must be registered with RegisterNotificationCategory first. The `CategoryID` must match the registered category.
 * If a NotificationCategory is not registered a basic notification will be sent.
 * (subtitle and category id are only available on macOS)
 * @param {$models.NotificationOptions} options
 * @returns {Promise<void> & { cancel(): void }}
 */
export function SendNotificationWithActions(options) {
    let $resultPromise = /** @type {any} */($Call.ByID(1615199806, options));
    return $resultPromise;
}
